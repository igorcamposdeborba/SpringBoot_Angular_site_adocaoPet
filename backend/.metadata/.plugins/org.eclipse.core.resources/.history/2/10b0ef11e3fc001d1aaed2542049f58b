package com.adocao.pet.services;

import java.time.Instant;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.adocao.pet.entities.Adopter;
import com.adocao.pet.entities.AdopterPetAssociation;
import com.adocao.pet.entities.Pet;
import com.adocao.pet.entities.dtos.AdopterDTO;
import com.adocao.pet.repositories.AdopterPetAssociationRepository;
import com.adocao.pet.repositories.AdopterRepository;
import com.adocao.pet.repositories.PetRepository;
import com.adocao.pet.services.exceptions.IllegalFormatException;
import com.adocao.pet.services.exceptions.ObjectNotFoundException;

import jakarta.validation.Valid;

@Service // injetar instancias em outras partes do código
public class AdopterService {

	@Autowired // spring intancia objeto injetando dependência
	private AdopterRepository adopterRepository;
	// @Autowired
	private AdopterPetAssociationRepository adopterPetAssociationRepository;
	@Autowired 
	private PetRepository petRepository;
	
	/*public AdopterService(AdopterPetAssociationRepository adopterPetAssociationRepository) {
		this.adopterPetAssociationRepository = adopterPetAssociationRepository;
	}*/
	
	
	public List<Adopter> findAll() {
		return adopterRepository.findAll();
	}
	
	public Adopter findById(Integer id) {
		Optional<Adopter> adopter = adopterRepository.findById(id);
		
		return adopter.orElseThrow(() -> new ObjectNotFoundException("Adotante não encontrado pelo id " + id));
	}
	
	public Adopter findByEmail(String email) {
		Optional<Adopter> adopter = adopterRepository.findByEmail(email);

		return adopter.orElse(null);
	}
	
	// !! REVISAR ( todo ) ver se devo implementar no AdopterDTO e aqui o relacionamento com AdopterPetAssociation E ao invés do AdopterPetAssociation salvar uma nova linha, ele atualiza o e-mail daquele usuário se já existe o e-mail para aquele Pet no banco de dados
	// ADICIONA recurso no banco de dados
	public Adopter create(Integer idPet, @Valid AdopterDTO adopterDTO) { // ! alterar para receber o ID do Pet
		
		// addPetAdopter(idPet, adopterDTO); // ! REVISAR
		
		// UPDATE: Validar se já existe o adopter no banco de dados pelo e-mail, se sim, só atualizar os dados que o adopter enviou.
		Optional<Adopter> varAdopterOnDatabase = adopterRepository.findByEmail(adopterDTO.getEmail());
		
		if (adopterDTO != null && varAdopterOnDatabase.isPresent() && adopterDTO.getEmail().equalsIgnoreCase(varAdopterOnDatabase.get().getEmail())) { // verificar se existe o cadastro daquele e-mail
				return update(idPet, adopterDTO); // ATUALIZAR cadastro
				
		} else {
			Adopter varNewAdopter = new Adopter(adopterDTO); // CONVERTER DTO para Adopter
				
			return adopterRepository.save(varNewAdopter); // ADICIONAR cadastro: salvar no banco de dados pelo Repository	
		}
	}
	
	// EDITA ou ADICIONA recurso no banco de dados: porque tenho só um botão para enviar o formulário
	public Adopter update(Integer idPet, @Valid AdopterDTO adopterDTO) {
		
		// addPetAdopter(idPet, adopterDTO); // ! REVISAR
		
		// Encontrar Adopter pelo email e validar exceptions
		Adopter newAdopter = findByEmail(adopterDTO.getEmail());
		Optional<Adopter> oldAdopter = adopterRepository.findByEmail(adopterDTO.getEmail());
		validateEmail(adopterDTO);
		validateIsPresentName(adopterDTO);
		validateTelephone(adopterDTO);
		
		// EDITAR
		if (oldAdopter.isPresent()) {
			Adopter editedAdopter = oldAdopter.get(); // Get(): retornar o objeto inteiro da classe
			editedAdopter.setName(adopterDTO.getName()); // Editar atributos
			editedAdopter.setTelephone(adopterDTO.getTelephone());
			
			return adopterRepository.save(editedAdopter); 
		}
		
		// ADICIONAR: Criar objeto que vou adicionar no banco de dados
		adopterDTO.setId(null); // Validação: garantir que o objDTO do parâmetro que estou adicionando não tenha id (evita alterar outro registro se tiver id na requisição)
		newAdopter = new Adopter(adopterDTO);
		
		return adopterRepository.save(newAdopter); // UPDATE: atualizar no banco de dados
	}
	
	public AdopterPetAssociation addPetAdopter(Integer idPet, AdopterDTO adopterDTO) {
		// Encontrar Pet do Adopter pelo e-mail do Adopter
		List<AdopterPetAssociation> adopterPetAssociation = adopterPetAssociationRepository.findAll(); // ! REVISAR pra ver se tá certo. Talvez implementar find by id do Adopter na classe do relacionamento AdopterPetAssociation
		
		// Salvar data e hora do request e demais atributos no banco de dados
		Instant currentDateRequest = adopterPetAssociation.get(adopterPetAssociation.size()-1).getDateRequest(); // ! REVISAR para ver se precisa, ver se não duplica o valor. Porque o adopterPetAssociation já teria a hora na instanciação
		AdopterPetAssociation currentAdopterPet = adopterPetAssociation.get(adopterPetAssociation.size()-1); // Pegar a última requisição de data e hora (pega o objeto inteiro da classe de associação)
		currentAdopterPet.addDateRequest(currentDateRequest); // adicionar data do request na classe de associação
		
		// Buscar Pet e Adopter para colocar na classe de relacionamento AdopterPetAssociation
		Optional<Pet> pet = petRepository.findById(idPet); // Optional: pode ou não encontrar o valor no banco de dados. Ele Não admite null
		Optional<Adopter> adopter = adopterRepository.findByEmail(adopterDTO.getEmail());
		if (pet.isPresent() && adopter.isPresent()) {
			Pet petObj = pet.get();
			currentAdopterPet.setPet(petObj);
			
			Adopter adopterObj = adopter.get();
			currentAdopterPet.setAdopter(adopterObj);
		}
		
		return adopterPetAssociationRepository.save(currentAdopterPet); // Salvar no banco de dados a classe de associação
		
	}



	
	// VALIDAÇÃO Obrigatória
	private void validateEmail(AdopterDTO adopterDTO) {
		if (adopterDTO == null) {
			throw new NullPointerException("O campo E-MAIL é obrigatório");
		}
		
		if(adopterDTO.getEmail().equalsIgnoreCase("teste@hotmail.com")) {
			throw new IllegalFormatException("Formato errado de E-MAIL. Exemplo: teste@hotmail.com. Não use o e-mail do exemplo.");
		}
		
		if (!adopterDTO.getEmail().contains("@")) {
			throw new IllegalFormatException("Formato errado de E-MAIL. Exemplo: teste@hotmail.com");
		}
	}
	
	
	// Validações Facultativas/'redundantes' por segurança no back-end (front já valida isso no html) para não persistir errado no banco de dados caso alguém altere o html
	
	private void validateIsPresentName(AdopterDTO adopterDTO) {
		
		if (adopterDTO.getName() == null) { // Validar se existe o nome do adotante no parâmetro para a requisição
			throw new NullPointerException("O campo NOME é obrigatório");
		}
	}
	
	// Validar o valor (formatação) do telefone. Admite repetição de telefone no banco de dados porque duas pessoas podem ter o mesmo telefone residencial ou celular
	private void validateTelephone(AdopterDTO adopterDTO) {
		if (adopterDTO == null) {
			throw new NullPointerException("O campo TELEFONE é obrigatório");
		}
		
		if (adopterDTO.getTelephone().equalsIgnoreCase("55 48 981784550") || adopterDTO.getTelephone().equalsIgnoreCase("5548981784550")) {
			throw new IllegalFormatException("Formato errado de TELEFONE. Exemplo: 55 48 981784550. Não use o telefone do exemplo.");
		}
		
		if (adopterDTO.getTelephone().matches("^((?=[A-Z|a-z]).)*$") == false && adopterDTO.getTelephone().length() > 19) { // Regex validate telephone's value.
			throw new IllegalFormatException("Formato errado de TELEFONE. Exemplo: 55 48 98178455");
		}
	}
	/* Casos de uso de telefone válido
	+55 51 98175.4550
	+55 5198175.4550
	+55 51 3075.4448
	+55 513075.4448
	+55 51 98175-4550
	+55 5198175-4550
	+55 51 3075-4448
	+55 513075-4448
	+5551 98175.4550
	+555198175.4550
	+5551 3075.4448
	+55513075.4448
	+5551 98175-4550
	+555198175-4550
	+5551 3075-4448
	+55513075-4448
	55 48 981784550
	+55 (51) 98175.4550
	+55 (51)98175.4550
	+55 (51) 3075.4448
	+55 (51)3075.4448
	+55 (51) 98175-4550
	+55 (51)98175-4550
	+55 (51) 3075-4448
	+55 (51)3075-4448
	(51) 98175.4550
	(51)98175.4550
	(51) 3075.4448
	(51)3075.4448
	(51) 98175-4550
	(51)98175-4550
	(51) 3075-4448
	(51)3075-4448
	51 981754550
	51 30754448
	51981754550
	5130754448
	*/
	
}
