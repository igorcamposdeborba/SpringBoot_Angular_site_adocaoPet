package com.adocao.pet.services;

import java.util.Base64;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.adocao.pet.entities.Pet;
import com.adocao.pet.repositories.PetRepository;
import com.adocao.pet.services.exceptions.ObjectNotFoundException;

@Service // injetar instancias em outras partes do código
public class PetService {

	@Autowired // spring intancia objeto injetando dependência
	private PetRepository petRepository;
	private List<Pet> base64String;	

	public Pet findById(Integer id) {
		Optional<Pet> objPet = petRepository.findById(id); // Optional: pode ou não encontrar o valor no banco de dados. Ele Não admite null
		
		return objPet.orElseThrow(() -> new ObjectNotFoundException("Objeto não encontrado pelo id " + id));
	}

	
	public List<Pet> findAll(){
		List<Pet> petList = petRepository.findAll(); // buscar Pets no banco de dados
		
		Object[] base64String = null;
		for (Pet i : petList) { // converter cada imagem em Base64
			String[] image = i.getImage();
			//String Base64String = Base64.getEncoder().encodeToString(image); // Codificar para Base64 (formato reconhecido pelo front-end/Angular)
			for (int j=0; j<petList.size(); j++) {
				this.base64String.add(i);
				this.base64String[j] = Base64.getEncoder(); // Codificar para Base64 (formato reconhecido pelo front-end/Angular)
			}
			// i.setImage(Base64String.getBytes()); // codificar em bytes para o JSON
			i.setImage(base64String); // codificar em bytes para o JSON
		}
		
		return petList;
	}

}
